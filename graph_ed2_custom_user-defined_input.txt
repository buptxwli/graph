#include <cstring>
#include <cmath>
#include <algorithm>
#include <vector>
#include <queue>
#include <cstdio>
using namespace std;
char in[100][100];
struct P
{
    int x;
    int y;
};
P point[1000];
struct E
{
    int nextx;
    int nexty;
    int cost;
};
vector <E> edge[1000];
bool mark[1000];
int dis[1000];
int main()
{
    freopen("input.txt", "r", stdin);
	int row,line;
	while (scanf("%d%d",&row,&line)!=EOF)
	{
		int s=0;
		for(int i=0;i<row;i++)
		{
			getchar();
			for(int j=0;j<line;j++)
			{
				scanf("%c",&in[i][j]);
				point[s].x=i;
				point[s].y=j;
				s++;
			}
		}
		for(int i=0;i<s;i++)
			edge[i].clear();
		E tmp;
		tmp.cost=1;
		for(int i=0;i<s;i++)
		{
			if(point[i].x==0)      //first line only down
			{
				tmp.nextx=point[i].x+1;
				tmp.nexty=point[i].y;
				edge[i].push_back(tmp);
			}
			if(point[i].x==row-1)  //last line only up
			{
				tmp.nextx=point[i].x-1;
				tmp.nexty=point[i].y;
				edge[i].push_back(tmp);
			}
			if (in[point[i].x][point[i].y]=='>')  //turn left
			{
				tmp.nextx=point[i].x;
				tmp.nexty=point[i].y+1;
				edge[i].push_back(tmp);
			}
			if(in[point[i].x][point[i].y]=='<')   //turn right
			{
                tmp.nextx=point[i].x;
                tmp.nexty=point[i].y-1;
                edge[i].push_back(tmp);
			}
			if(point[i].x==1)
			{
				tmp.nextx=point[i].x-1;
				tmp.nexty=point[i].y;
				edge[i].push_back(tmp);
			}
			if(point[i].x==row-2)
			{
				tmp.nextx=point[i].x+1;
				tmp.nexty=point[i].y;
				edge[i].push_back(tmp);
			}
			if(in[point[i].x][point[i].y]=='X')
			{
				if(point[i].x!=line-1 && in[point[i].x][point[i].y+1]=='>')
				{
					tmp.nextx=point[i].x;
					tmp.nexty=point[i].y+1;
					edge[i].push_back(tmp);
				}
				if(point[i].x!=0 && in[point[i].x][point[i].y-1]=='<')
				{
					tmp.nextx=point[i].x;
					tmp.nexty=point[i].y-1;
					edge[i].push_back(tmp);
				}
				if(in[point[i].x+1][point[i].y]=='X')
				{
					tmp.nextx=point[i].x+1;
					tmp.nexty=point[i].y;
					edge[i].push_back(tmp);
				}
				if (in[point[i].x-1][point[i].y]=='X')
                {
                    tmp.nextx=point[i].x-1;
					tmp.nexty=point[i].y;
					edge[i].push_back(tmp);
                }
			}
			if(in[point[i].x][point[i].y]=='Y')
			{
				if(point[i].x!=line-1 && in[point[i].x][point[i].y+1]=='>')
				{
					tmp.nextx=point[i].x;
					tmp.nexty=point[i].y+1;
					edge[i].push_back(tmp);
				}
				if(point[i].x!=0 && in[point[i].x][point[i].y-1]=='<')
				{
					tmp.nextx=point[i].x;
					tmp.nexty=point[i].y-1;
					edge[i].push_back(tmp);
				}
				if(in[point[i].x+1][point[i].y]=='Y')
				{
					tmp.nextx=point[i].x+1;
					tmp.nexty=point[i].y;
					edge[i].push_back(tmp);
				}
				if (in[point[i].x-1][point[i].y]=='Y')
                {
                    tmp.nextx=point[i].x-1;
					tmp.nexty=point[i].y;
					edge[i].push_back(tmp);
                }
			}
		}
		for (int i=0;i<s;i++) {
            for (int j=0;j<edge[i].size();j++) {
                printf("(%d,%d)->(%d,%d)\n", point[i].x, point[i].y, edge[i][j].nextx, edge[i][j].nexty);
            }
		}
		P start,last;
		scanf("%d%d%d%d",&start.x,&start.y,&last.x,&last.y);
		for(int i=0;i<s;i++)
		{
			dis[i]=-1;
			mark[i]=false;
		}
		dis[start.x*line+start.y]=0;
		mark[start.x*line+start.y]=true;
		P newp=start;
		for(int i=0;i<s;i++)
		{
			for(int j=0;j<edge[newp.x*line+newp.y].size();j++)
			{
				int m=edge[newp.x*line+newp.y][j].nextx;
				int n=edge[newp.x*line+newp.y][j].nexty;
				int c=edge[newp.x*line+newp.y][j].cost;
				if(mark[m*line+n]==true) continue;
				if(dis[m*line+n]==-1 || dis[m*line+n]>dis[newp.x*line+newp.y]+c)
					dis[m*line+n]=dis[newp.x*line+newp.y]+c;
			}
			int least=12121211;
			for(int j=0;j<s;j++)
			{
				if(mark[j]==true) continue;
				if(dis[j]==-1) continue;
				if(dis[j]<least)
				{
					least=dis[j];
					newp.x=j/line;
					newp.y=j%line;
				}
			}
			mark[newp.x*line+newp.y]=true;
		}
		printf("%d\n",dis[last.x*line+last.y]);
	}
	return 0;
}
